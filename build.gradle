
apply plugin: 'com.android.library'
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

ext.kotlin_version = '1.3.72'
ext.gsonVersion = '2.8.6'
ext.room_version = '2.2.5'
ext.aspectjrt = '1.9.5'
ext.androidx_core = '1.0.0'
ext.appcompat_version = '1.1.0'
ext.recyclerview_version = '1.1.0'
ext.constraint_layout_version = '2.0.0-beta7'
ext.retrofit_version = "2.1.0"
ext.work = "2.3.4"

buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.3'
        classpath 'org.aspectj:aspectjtools:1.9.5'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
//apply plugin: 'jacoco'
//jacoco {
//    toolVersion = '0.7.5.201505241946'
//}

repositories {
//  mavenCentral()
    jcenter()
    google()
}

dependencies {
    implementation "org.aspectj:aspectjrt:$aspectjrt"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "androidx.core:core:$androidx_core"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    //room db dependency
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version" // For Kotlin use kapt instead of annotationProcessor


    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"


//    // Test helpers
//    testImplementation "androidx.room:room-testing:$room_version"

    implementation 'androidx.core:core:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.cardview:cardview:1.0.0"
    implementation 'com.google.android.material:material:1.0.0'

    // Core library
    androidTestImplementation 'androidx.test:core:1.0.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'

    // Assertions
    androidTestImplementation 'androidx.test.ext:junit:1.0.0'
    androidTestImplementation 'androidx.test.ext:truth:1.0.0'
    androidTestImplementation 'com.google.truth:truth:0.42'

    testImplementation('junit:junit:4.12')
    testImplementation 'org.mockito:mockito-core:2.7.22'
    androidTestImplementation 'org.mockito:mockito-android:2.7.22'
//    androidTestImplementation 'androidx.test:runner:1.1.0'
//    androidTestImplementation 'androidx.test:rules:1.1.0'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    //work manager
    implementation "androidx.work:work-runtime-ktx:$work"

    implementation 'com.squareup.retrofit2:retrofit:2.1.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'
}

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'

    lintOptions {
        abortOnError false
    }
    defaultConfig {
        multiDexEnabled true
        minSdkVersion 19
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildTypes {
        debug {
            //testCoverageEnabled true
        }
    }
}

android.libraryVariants.all { variant ->
//  LibraryPlugin plugin = project.plugins.getPlugin(LibraryPlugin)
    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath/*,
                     "-bootclasspath", plugin.project.android.bootClasspath.join(
        File.pathSeparator)*/]

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler)

        def log = project.logger
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
